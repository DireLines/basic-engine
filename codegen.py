# codegen.py
import subprocess
import yaml
import os
class NameGenerator:
    def __init__(self,variable_name):
        self.id = 0
        self.variable_name = variable_name
    def next(self):
        self.id += 1
        return variable_name + str(self.id)
variable_name_generator = {}

# /path/to/cool-file.txt -> cool-file
def filename(filepath):
    return os.path.splitext(os.path.basename(obj_filename))[0]

components_needed = set()
classes_declared = set()

header = """#ifndef GAMEOBJECTS_H
#define GAMEOBJECTS_H
// AUTOGENERATED GameObject variants

#include "GameObject.h"
"""

classes = ""
obj_filenames = subprocess.run('find ./src -name *.object'.split(), capture_output=True).stdout.decode('ascii').split('\n')[:-1]
for obj_filename in sorted(obj_filenames):
    with open(obj_filename, 'r') as obj_file:
        class_name = filename(obj_filename)
        classes_declared.add(class_name)
        class_code = """
class Example: public GameObject {
public:
    Example() {}
    ~Example() {}
};
        """.replace("Example",class_name)
        components = yaml.safe_load(obj_file.read())
        for component in components:
            component_name = component
            if(type(component) == dict):
                component_name = list(component.keys())[0]
            components_needed.add(component_name)
            if component_name not in variable_name_generator:
                variable_name_generator[component_name] = NameGenerator(component_name.lower())
        classes += class_code

component_includes = ""
for component in sorted(components_needed):
    component_includes += '#include "' + component + '.h"\n'

forward_decls = "\n"
for class_name in sorted(classes_declared):
    forward_decls += "class " + class_name + ";\n"


footer = "\n\n#endif\n"
code = header + component_includes + forward_decls + classes + footer
gameobjects_file = open('./src/generated/GameObjects.h','w')
gameobjects_file.write(code)

